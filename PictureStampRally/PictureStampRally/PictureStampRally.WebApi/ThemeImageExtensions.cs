// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using PictureStampRally.WebApiClient;

namespace PictureStampRally.WebApiClient
{
    public static partial class ThemeImageExtensions
    {
        /// <param name='operations'>
        /// Reference to the PictureStampRally.WebApiClient.IThemeImage.
        /// </param>
        /// <param name='file'>
        /// Required. アップロードするファイル
        /// </param>
        /// <param name='eventId'>
        /// Required. イベントID
        /// </param>
        /// <param name='hintAddr'>
        /// Required. だいたいの場所
        /// </param>
        public static string Post(this IThemeImage operations, Stream file, int eventId, string hintAddr)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IThemeImage)s).PostAsync(file, eventId, hintAddr);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the PictureStampRally.WebApiClient.IThemeImage.
        /// </param>
        /// <param name='file'>
        /// Required. アップロードするファイル
        /// </param>
        /// <param name='eventId'>
        /// Required. イベントID
        /// </param>
        /// <param name='hintAddr'>
        /// Required. だいたいの場所
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostAsync(this IThemeImage operations, Stream file, int eventId, string hintAddr, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostWithOperationResponseAsync(file, eventId, hintAddr, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the PictureStampRally.WebApiClient.IThemeImage.
        /// </param>
        /// <param name='file'>
        /// Required. アップロードするファイル
        /// </param>
        /// <param name='themeImageId'>
        /// Required. イメージID
        /// </param>
        /// <param name='hintAddr'>
        /// Required. だいたいの場所
        /// </param>
        public static string Put(this IThemeImage operations, Stream file, int themeImageId, string hintAddr)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IThemeImage)s).PutAsync(file, themeImageId, hintAddr);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the PictureStampRally.WebApiClient.IThemeImage.
        /// </param>
        /// <param name='file'>
        /// Required. アップロードするファイル
        /// </param>
        /// <param name='themeImageId'>
        /// Required. イメージID
        /// </param>
        /// <param name='hintAddr'>
        /// Required. だいたいの場所
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PutAsync(this IThemeImage operations, Stream file, int themeImageId, string hintAddr, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PutWithOperationResponseAsync(file, themeImageId, hintAddr, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
