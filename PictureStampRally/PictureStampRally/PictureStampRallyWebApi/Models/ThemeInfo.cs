// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace PictureStampRally.Models
{
    public partial class ThemeInfo
    {
        private string _hintAddress;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string HintAddress
        {
            get { return this._hintAddress; }
            set { this._hintAddress = value; }
        }
        
        private IList<string> _hints;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<string> Hints
        {
            get { return this._hints; }
            set { this._hints = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _imageBase64String;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ImageBase64String
        {
            get { return this._imageBase64String; }
            set { this._imageBase64String = value; }
        }
        
        private int? _score;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Score
        {
            get { return this._score; }
            set { this._score = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ThemeInfo class.
        /// </summary>
        public ThemeInfo()
        {
            this.Hints = new LazyList<string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken hintAddressValue = inputObject["HintAddress"];
                if (hintAddressValue != null && hintAddressValue.Type != JTokenType.Null)
                {
                    this.HintAddress = ((string)hintAddressValue);
                }
                JToken hintsSequence = ((JToken)inputObject["Hints"]);
                if (hintsSequence != null && hintsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken hintsValue in ((JArray)hintsSequence))
                    {
                        this.Hints.Add(((string)hintsValue));
                    }
                }
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken imageBase64StringValue = inputObject["ImageBase64String"];
                if (imageBase64StringValue != null && imageBase64StringValue.Type != JTokenType.Null)
                {
                    this.ImageBase64String = ((string)imageBase64StringValue);
                }
                JToken scoreValue = inputObject["Score"];
                if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                {
                    this.Score = ((int)scoreValue);
                }
            }
        }
    }
}
